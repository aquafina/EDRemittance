package model.am;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.sql.Timestamp;

import java.text.ParseException;
import java.text.SimpleDateFormat;

import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;

import javax.servlet.http.HttpSession;

import model.am.common.AppModule;

import model.lov.CommInvNumLOVImpl;

import model.lov.CustomerNameLOVImpl;
import model.lov.ExchangeRateLOVImpl;
import model.lov.ReceiptMethodsLOVImpl;

import model.vo.EDRemittanceLineVOImpl;

import model.vo.EDRemittanceVOImpl;

import model.vo.EDRemittanceVORowImpl;

import oracle.adf.share.ADFContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Dec 04 21:45:06 PKT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppModuleImpl extends ApplicationModuleImpl implements AppModule {
    /**
     * This is the default constructor (do not remove).
     */
    public AppModuleImpl() {
    }

    /**
     * Container's getter for EDRemittanceVO1.
     * @return EDRemittanceVO1
     */
    public ViewObjectImpl getEDRemittanceVO1() {
        return (ViewObjectImpl)findViewObject("EDRemittanceVO1");
    }

    /**
     * Container's getter for HzPartiesLOV1.
     * @return HzPartiesLOV1
     */
    public ViewObjectImpl getHzPartiesLOV1() {
        return (ViewObjectImpl)findViewObject("HzPartiesLOV1");
    }

    /**
     * Container's getter for ReceiptMethodsLOV1.
     * @return ReceiptMethodsLOV1
     */
    public ViewObjectImpl getReceiptMethodsLOV1() {
        return (ViewObjectImpl)findViewObject("ReceiptMethodsLOV1");
    }


    public void setBindVarAndExceuteCommInvNumLov(String custId, String orgId){
            Row currentRow = getEDRemittanceLinesVO1().getCurrentRow();
            RowSet lovVO = (RowSet)currentRow.getAttribute("CommInvNumLOV1");
            if (lovVO != null) {
                lovVO.setNamedWhereClauseParam("P_CUST_ID", custId);   
                lovVO.setNamedWhereClauseParam("P_ORG_ID", orgId);   
                System.out.println("custId = "+custId);
                System.out.println("orgId = "+orgId);
                lovVO.executeQuery();
            }
            /*lovVO.setNamedWhereClauseParam("DeptIdBind", deptId);
            lovVO.executeQuery();*/
        }

    /**
     * Container's getter for CommInvNumLOV1.
     * @return CommInvNumLOV1
     */
    public ViewObjectImpl getCommInvNumLOV1() {
        return (ViewObjectImpl)findViewObject("CommInvNumLOV1");
    }

    /**
     * Container's getter for EDRemittanceLinesVO1.
     * @return EDRemittanceLinesVO1
     */
    public ViewObjectImpl getEDRemittanceLinesVO1() {
        return (ViewObjectImpl)findViewObject("EDRemittanceLinesVO1");
    }

    /**
     * Container's getter for EDRemittanceVO2.
     * @return EDRemittanceVO2
     */
    public ViewObjectImpl getEDRemittanceVO2() {
        return (ViewObjectImpl)findViewObject("EDRemittanceVO2");
    }

    /**
     * Container's getter for EDRemittanceLinesVO2.
     * @return EDRemittanceLinesVO2
     */
    public ViewObjectImpl getEDRemittanceLinesVO2() {
        return (ViewObjectImpl)findViewObject("EDRemittanceLinesVO2");
    }

    /**
     * Container's getter for RemittanceHeaderLineVL.
     * @return RemittanceHeaderLineVL
     */
    public ViewLinkImpl getRemittanceHeaderLineVL() {
        return (ViewLinkImpl)findViewLink("RemittanceHeaderLineVL");
    }

    /**
     * Container's getter for EDRemittanceSearchVO1.
     * @return EDRemittanceSearchVO1
     */
    public ViewObjectImpl getEDRemittanceSearchVO1() {
        return (ViewObjectImpl)findViewObject("EDRemittanceSearchVO1");
    }

    /**
     * Container's getter for EDRemittanceVO3.
     * @return EDRemittanceVO3
     */
    public ViewObjectImpl getEDRemittanceVO3() {
        return (ViewObjectImpl)findViewObject("EDRemittanceVO3");
    }

    /**
     * Container's getter for EDRemittanceLinesVO3.
     * @return EDRemittanceLinesVO3
     */
    public ViewObjectImpl getEDRemittanceLinesVO3() {
        return (ViewObjectImpl)findViewObject("EDRemittanceLinesVO3");
    }

    /**
     * Container's getter for EDRemittanceHdrLinesVL.
     * @return EDRemittanceHdrLinesVL
     */
    public ViewLinkImpl getEDRemittanceHdrLinesVL() {
        return (ViewLinkImpl)findViewLink("EDRemittanceHdrLinesVL");
    }

    /**
     * Container's getter for ExchangeRateLOV1.
     * @return ExchangeRateLOV1
     */
    public ViewObjectImpl getExchangeRateLOV1() {
        return (ViewObjectImpl)findViewObject("ExchangeRateLOV1");
    }

    /**
     * Container's getter for PrcStatusLOV1.
     * @return PrcStatusLOV1
     */
    public ViewObjectImpl getPrcStatusLOV1() {
        return (ViewObjectImpl)findViewObject("PrcStatusLOV1");
    }
    
    
    public String callCreateReceiptProc(int sqlReturnType, String stmt){
        System.out.println(sqlReturnType+ " "+stmt);
        CallableStatement cst = null;
        String status = null;
        try {
            //Creating sql statement
            
            cst = this.getDBTransaction().createCallableStatement("{CALL " + stmt + " }", 0);
            //Register dataType for return value
            
            //Pass input parameters value
            ViewObject EDRemittanceVO = this.getEDRemittanceVO3();
            Row currRow = EDRemittanceVO.getCurrentRow();
            cst.setInt(1,Integer.parseInt(currRow.getAttribute("RemittanceHeaderId").toString()));
            System.out.println("header id = "+Integer.parseInt(currRow.getAttribute("RemittanceHeaderId").toString()));
            cst.setInt(2,Integer.parseInt(currRow.getAttribute("CustomerId").toString()));
            System.out.println("cust id = "+Integer.parseInt(currRow.getAttribute("CustomerId").toString()));
            cst.setInt(3,Integer.parseInt(currRow.getAttribute("ReceiptMethodId").toString()));
            System.out.println("receipt method id = "+Integer.parseInt(currRow.getAttribute("ReceiptMethodId").toString()));
            cst.setString(4,currRow.getAttribute("Currency").toString());
            System.out.println("Currency = "+currRow.getAttribute("Currency").toString());
            SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
            java.util.Date dateJava = sdf1.parse(currRow.getAttribute("GlDate").toString());
//            java.sql.Date dateSQL = new java.sql.Date(dateJava.getTime());
//            cst.setTimestamp(5,new Timestamp(dateJava.getTime()));
            String paramDate = new Timestamp(dateJava.getTime()).toString().split(" ")[0];
            cst.setString(5,paramDate);
//            cst.set(5, "to_date('"++"','YYYY-MM-DD')");
            System.out.println("Gl Date = "+paramDate);
            cst.setString(6, currRow.getAttribute("ReceiptNumber").toString());
            System.out.println("Receipt Number = "+currRow.getAttribute("ReceiptNumber").toString());
            cst.setString(7, currRow.getAttribute("ExchangeType").toString());
            System.out.println("Exchange Type = "+currRow.getAttribute("ExchangeType").toString());
            cst.setDouble(8,Double.parseDouble(currRow.getAttribute("ExchangeRate").toString()));
            System.out.println("Exchange Rate = "+Double.parseDouble(currRow.getAttribute("ExchangeRate").toString()));
            cst.setInt(9, Integer.parseInt(currRow.getAttribute("RemittanceBankAcctId").toString()));
            System.out.println("Bank Account Id = "+Integer.parseInt(currRow.getAttribute("RemittanceBankAcctId").toString()));
            cst.setInt(10, Integer.parseInt(currRow.getAttribute("OrgId").toString()));
            System.out.println("org id = "+Integer.parseInt(currRow.getAttribute("OrgId").toString()));
            cst.setString(11, currRow.getAttribute("ReceiptCategory")!=null?currRow.getAttribute("ReceiptCategory").toString():null);
            System.out.println("Receipt Category = "+currRow.getAttribute("ReceiptCategory"));
            cst.setString(12, currRow.getAttribute("ExportCategory")!=null?currRow.getAttribute("ExportCategory").toString():null);
            System.out.println("Export Category = "+currRow.getAttribute("ExportCategory"));
            cst.setInt(13,1110);//USER ID
            System.out.println("user id = "+1110);
            cst.setInt(14,20678);
            cst.setInt(15,222);
            System.out.println("resp appl id = "+222);
            cst.registerOutParameter(16, sqlReturnType);
            cst.execute();
            //Finally get returned value
            status = cst.getString(16);
            
//            getDBTransaction().commit();
        } catch (SQLException e) {
            throw new JboException(e.getMessage());
        } catch (ParseException e) {
        } finally {
            if (cst != null) {
                try {
                    cst.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return status;
    }
    
    public java.sql.Date convertFromStringToSqlDate(String dateStr) {
        SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
        java.util.Date dateJava = null;
        java.sql.Date sqlStartDate =  null;
        try {
            dateJava = sdf1.parse(dateStr);
            sqlStartDate = new java.sql.Date(dateJava.getTime());  
        } catch (ParseException e) {
        }
        return sqlStartDate;
    }

    /**
     * Container's getter for CustomerNameLOV1.
     * @return CustomerNameLOV1
     */
    public ViewObjectImpl getCustomerNameLOV1() {
        return (ViewObjectImpl)findViewObject("CustomerNameLOV1");
    }
    
    
    
    public void setSessionValues(String orgId, String userId, String respId, String respAppl, String mfgOrgId) {
        
//        System.out.println(orgId+" "+userId);
        ADFContext.getCurrent().getSessionScope().put("user_id", userId);
        ADFContext.getCurrent().getSessionScope().put("org_id", orgId);
        ADFContext.getCurrent().getSessionScope().put("resp_id", respId);
        ADFContext.getCurrent().getSessionScope().put("resp_appl_id", respAppl);
        ADFContext.getCurrent().getSessionScope().put("mfg_org_id", mfgOrgId);
    }

    /**
     * Container's getter for EDRemittanceVO4.
     * @return EDRemittanceVO4
     */
    public ViewObjectImpl getEDRemittanceVO4() {
        return (ViewObjectImpl)findViewObject("EDRemittanceVO4");
    }

    /**
     * Container's getter for HrOperatingUnitsLOV1.
     * @return HrOperatingUnitsLOV1
     */
    public ViewObjectImpl getHrOperatingUnitsLOV1() {
        return (ViewObjectImpl)findViewObject("HrOperatingUnitsLOV1");
    }
    
    public String executeQuery(String query) {
            ResultSet rs;
            String code = null;
            try {
                rs = getDBTransaction().createStatement(0).executeQuery(query);
                if (rs.next()) {
                    code = (rs.getObject(1).toString());
                }
                rs.close();
                return code;

            } catch (SQLException e) {
                throw new JboException(e);
            }
        }

    public void setSessionValues(String orgId, String userId, String respId,
                                 String respAppl) {
        System.out.println("orgid = "+orgId);
        ADFContext.getCurrent().getSessionScope().put("user_id", userId);
        ADFContext.getCurrent().getSessionScope().put("org_id", orgId);
        ADFContext.getCurrent().getSessionScope().put("resp_id", respId);
        ADFContext.getCurrent().getSessionScope().put("resp_appl_id", respAppl);
    }

    /**
     * Container's getter for RemittanceHeaderIdLOV1.
     * @return RemittanceHeaderIdLOV1
     */
    public ViewObjectImpl getRemittanceHeaderIdLOV1() {
        return (ViewObjectImpl)findViewObject("RemittanceHeaderIdLOV1");
    }
}
